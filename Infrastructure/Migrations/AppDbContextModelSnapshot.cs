// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Model.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressDetail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVarChar");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVarChar");

                    b.Property<DateTime?>("CreateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("Int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVarChar");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVarChar");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVarChar");

                    b.Property<int>("UnitNumber")
                        .HasColumnType("Int");

                    b.Property<DateTime?>("UpdateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Model.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVarChar");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVarChar");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VarChar");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVarChar");

                    b.Property<DateTime?>("UpdateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MobileNumber")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Model.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AdminConfirmedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVarChar");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IsConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdminConfirmedId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Model.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpiredFrom")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartFrom")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Model.Entities.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCanceled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductSupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductSupplierId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Model.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AdminConfirmedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVarChar");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IsConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte>("Level")
                        .HasColumnType("TinyInt");

                    b.Property<int>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdminConfirmedId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Model.Entities.CategoryFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AdminConfirmedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVarChar");

                    b.Property<bool>("Filterable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("IsConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte>("Priority")
                        .HasColumnType("TinyInt");

                    b.Property<DateTime?>("UpdateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdminConfirmedId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Categoryfeatures");
                });

            modelBuilder.Entity("Model.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdminConfirmedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("NVarChar");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfRegistration")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductSupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdminConfirmedId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductSupplierId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Model.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfRegistration")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVarChar");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVarChar");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VarChar");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVarChar");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVarChar");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VarChar");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MobileNumber")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Model.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdminConfirmedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IsConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("NVarChar");

                    b.Property<byte>("Priority")
                        .HasColumnType("TinyInt");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdminConfirmedId");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Model.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdminConfirmedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCanceled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("IsConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalCost")
                        .HasPrecision(12, 2)
                        .HasColumnType("Decimal");

                    b.Property<decimal>("TotalDiscount")
                        .HasPrecision(12, 2)
                        .HasColumnType("Decimal");

                    b.Property<DateTime?>("UpdateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("AdminConfirmedId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Model.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Cost")
                        .HasPrecision(12, 2)
                        .HasColumnType("Decimal");

                    b.Property<DateTime?>("CreateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateOfPosting")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Discount")
                        .HasPrecision(12, 2)
                        .HasColumnType("Decimal");

                    b.Property<bool>("IsCanceled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductSupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("Int");

                    b.Property<bool>("Sent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("UnitCost")
                        .HasPrecision(12, 2)
                        .HasColumnType("Decimal");

                    b.Property<decimal>("UnitDiscount")
                        .HasPrecision(12, 2)
                        .HasColumnType("Decimal");

                    b.Property<DateTime?>("UpdateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductSupplierId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Model.Entities.Price", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdminConfirmedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpiredTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("PriceValue")
                        .HasPrecision(12, 2)
                        .HasColumnType("Decimal");

                    b.Property<Guid>("ProductSupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdminConfirmedId");

                    b.HasIndex("ProductSupplierId");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("Model.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdminConfirmedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVarChar");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVarChar");

                    b.Property<DateTime?>("UpdateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("View")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("AdminConfirmedId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Model.Entities.ProductFeatureValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AdminConfirmedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryFeatureId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FeatureValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("NVarChar");

                    b.Property<int>("IsConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdminConfirmedId");

                    b.HasIndex("ProductId");

                    b.HasIndex("CategoryFeatureId", "ProductId")
                        .IsUnique();

                    b.ToTable("ProductFeatureValues");
                });

            modelBuilder.Entity("Model.Entities.ProductSupplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(12, 2)
                        .HasColumnType("Decimal")
                        .HasDefaultValue(0m);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Ventory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ProductSuppliers");
                });

            modelBuilder.Entity("Model.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VarChar");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VarChar");

                    b.Property<DateTime?>("UpdateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Model.Entities.Score", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductSupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("StarRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TinyInt")
                        .HasDefaultValue((byte)0);

                    b.HasKey("Id");

                    b.HasIndex("ProductSupplierId");

                    b.HasIndex("CustomerId", "ProductSupplierId")
                        .IsUnique();

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("Model.Entities.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdminConfirmedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VarChar");

                    b.Property<string>("ChairmanName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVarChar");

                    b.Property<string>("CompanyRegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VarChar");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IsConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVarChar");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVarChar");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VarChar");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDatetime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdminConfirmedId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Model.Entities.Address", b =>
                {
                    b.HasOne("Model.Entities.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Model.Entities.Brand", b =>
                {
                    b.HasOne("Model.Entities.Admin", "AdminConfirmed")
                        .WithMany()
                        .HasForeignKey("AdminConfirmedId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AdminConfirmed");
                });

            modelBuilder.Entity("Model.Entities.Cart", b =>
                {
                    b.HasOne("Model.Entities.Customer", "Customer")
                        .WithMany("Carts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Model.Entities.CartItem", b =>
                {
                    b.HasOne("Model.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.ProductSupplier", "ProductSupplier")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductSupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("ProductSupplier");
                });

            modelBuilder.Entity("Model.Entities.Category", b =>
                {
                    b.HasOne("Model.Entities.Admin", "AdminConfirmed")
                        .WithMany()
                        .HasForeignKey("AdminConfirmedId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Model.Entities.Category", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AdminConfirmed");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Model.Entities.CategoryFeature", b =>
                {
                    b.HasOne("Model.Entities.Admin", "AdminConfirmed")
                        .WithMany()
                        .HasForeignKey("AdminConfirmedId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Model.Entities.Category", "Category")
                        .WithMany("CategoryFeatures")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdminConfirmed");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Model.Entities.Comment", b =>
                {
                    b.HasOne("Model.Entities.Admin", "AdminConfirmed")
                        .WithMany()
                        .HasForeignKey("AdminConfirmedId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Model.Entities.Customer", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.ProductSupplier", "ProductSupplier")
                        .WithMany("Comments")
                        .HasForeignKey("ProductSupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminConfirmed");

                    b.Navigation("Customer");

                    b.Navigation("ProductSupplier");
                });

            modelBuilder.Entity("Model.Entities.Image", b =>
                {
                    b.HasOne("Model.Entities.Admin", "AdminConfirmed")
                        .WithMany()
                        .HasForeignKey("AdminConfirmedId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Model.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdminConfirmed");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Model.Entities.Order", b =>
                {
                    b.HasOne("Model.Entities.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Admin", "AdminConfirmed")
                        .WithMany()
                        .HasForeignKey("AdminConfirmedId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Model.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("AdminConfirmed");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Model.Entities.OrderItem", b =>
                {
                    b.HasOne("Model.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Model.Entities.ProductSupplier", "ProductSupplier")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductSupplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductSupplier");
                });

            modelBuilder.Entity("Model.Entities.Price", b =>
                {
                    b.HasOne("Model.Entities.Admin", "AdminConfirmed")
                        .WithMany()
                        .HasForeignKey("AdminConfirmedId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Model.Entities.ProductSupplier", "ProductSupplier")
                        .WithMany("Prices")
                        .HasForeignKey("ProductSupplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdminConfirmed");

                    b.Navigation("ProductSupplier");
                });

            modelBuilder.Entity("Model.Entities.Product", b =>
                {
                    b.HasOne("Model.Entities.Admin", "AdminConfirmed")
                        .WithMany()
                        .HasForeignKey("AdminConfirmedId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Model.Entities.Brand", "Brand")
                        .WithMany("products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Model.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdminConfirmed");

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Model.Entities.ProductFeatureValue", b =>
                {
                    b.HasOne("Model.Entities.Admin", "AdminConfirmed")
                        .WithMany()
                        .HasForeignKey("AdminConfirmedId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Model.Entities.CategoryFeature", "CategoryFeature")
                        .WithMany("ProductFeatureValues")
                        .HasForeignKey("CategoryFeatureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Model.Entities.Product", "Product")
                        .WithMany("ProductFeatureValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdminConfirmed");

                    b.Navigation("CategoryFeature");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Model.Entities.ProductSupplier", b =>
                {
                    b.HasOne("Model.Entities.Product", "Product")
                        .WithMany("productSuppliers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Model.Entities.Supplier", "Supplier")
                        .WithMany("ProductSuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Model.Entities.Score", b =>
                {
                    b.HasOne("Model.Entities.Customer", "Customer")
                        .WithMany("Scores")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Model.Entities.ProductSupplier", "ProductSupplier")
                        .WithMany("Scores")
                        .HasForeignKey("ProductSupplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("ProductSupplier");
                });

            modelBuilder.Entity("Model.Entities.Supplier", b =>
                {
                    b.HasOne("Model.Entities.Admin", "AdminConfirmed")
                        .WithMany()
                        .HasForeignKey("AdminConfirmedId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AdminConfirmed");
                });

            modelBuilder.Entity("Model.Entities.Address", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Model.Entities.Brand", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("Model.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Model.Entities.Category", b =>
                {
                    b.Navigation("CategoryFeatures");

                    b.Navigation("ChildCategories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Model.Entities.CategoryFeature", b =>
                {
                    b.Navigation("ProductFeatureValues");
                });

            modelBuilder.Entity("Model.Entities.Customer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Carts");

                    b.Navigation("Comments");

                    b.Navigation("Orders");

                    b.Navigation("Scores");
                });

            modelBuilder.Entity("Model.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Model.Entities.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ProductFeatureValues");

                    b.Navigation("productSuppliers");
                });

            modelBuilder.Entity("Model.Entities.ProductSupplier", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Comments");

                    b.Navigation("OrderItems");

                    b.Navigation("Prices");

                    b.Navigation("Scores");
                });

            modelBuilder.Entity("Model.Entities.Supplier", b =>
                {
                    b.Navigation("ProductSuppliers");
                });
#pragma warning restore 612, 618
        }
    }
}
